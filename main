import java.sql.*;
import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class HotelBookingSystem {
    private static Connection connection;
    private static String userRole;
    private static JFrame frame;

    public static void main(String[] args) {
        try {
            // Подключение к базе данных
            connection = DriverManager.getConnection("jdbc:postgresql://localhost:5432/hotel_booking", "postgres", "natasha06");
            frame = new JFrame("Hotel Booking System");
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setSize(400, 300);
            JPanel panel = new JPanel();
            frame.add(panel);
            placeComponents(panel);
            frame.setVisible(true);
        } catch (SQLException e) {
            showError("Database connection error: " + e.getMessage());
        }
    }

    private static void placeComponents(JPanel panel) {
        panel.setLayout(null);
        JLabel userLabel = new JLabel("Username:");
        userLabel.setBounds(10, 20, 80, 25);
        panel.add(userLabel);

        JTextField usernameField = new JTextField(20);
        usernameField.setBounds(100, 20, 160, 25);
        panel.add(usernameField);

        JLabel passwordLabel = new JLabel("Password:");
        passwordLabel.setBounds(10, 60, 80, 25);
        panel.add(passwordLabel);

        JPasswordField passwordField = new JPasswordField(20);
        passwordField.setBounds(100, 60, 160, 25);
        panel.add(passwordField);

        JButton loginButton = new JButton("Login");
        loginButton.setBounds(10, 100, 80, 25);
        loginButton.addActionListener(e -> {
            String username = usernameField.getText();
            String password = new String(passwordField.getPassword());
            if (username.isEmpty() || password.isEmpty()) {
                showError("Username and password cannot be empty!");
                return;
            }
            String role = authenticateUser(username, password);
            if (role != null) {
                userRole = role;
                JOptionPane.showMessageDialog(null, "Login Successful! Role: " + userRole);
                showUserPanel();
            } else {
                showError("Invalid credentials!");
            }
        });
        panel.add(loginButton);

        JButton registerButton = new JButton("Register");
        registerButton.setBounds(100, 100, 100, 25);
        registerButton.addActionListener(e -> {
            String username = usernameField.getText();
            String password = new String(passwordField.getPassword());
            if (username.isEmpty() || password.isEmpty()) {
                showError("Username and password cannot be empty!");
                return;
            }
            String role = selectUserRole();
            if (role != null) {
                registerUser(username, password, role);
            }
        });
        panel.add(registerButton);
    }

    private static String authenticateUser(String username, String password) {
        String role = null;
        try (CallableStatement statement = connection.prepareCall("{? = call authenticate_user(?, ?)}")) {
            statement.registerOutParameter(1, Types.VARCHAR);
            statement.setString(2, username);
            statement.setString(3, password);
            statement.execute();
            role = statement.getString(1);
        } catch (SQLException e) {
            showError("Authentication error: " + e.getMessage());
        }
        return role;
    }

    private static void registerUser(String username, String password, String role) {
        try (PreparedStatement statement = connection.prepareStatement("INSERT INTO users (username, password, role) VALUES (?, ?, ?)")) {
            statement.setString(1, username);
            statement.setString(2, password);
            statement.setString(3, role);
            statement.executeUpdate();
            JOptionPane.showMessageDialog(null, "User registered successfully!");
        } catch (SQLException e) {
            showError("Registration error: " + e.getMessage());
        }
    }

    private static void showUserPanel() {
        frame.getContentPane().removeAll();
        JPanel userPanel = new JPanel();
        userPanel.setLayout(null);

        if ("admin".equals(userRole)) {
            JLabel adminLabel = new JLabel("Admin Panel");
            adminLabel.setBounds(10, 20, 150, 25);
            userPanel.add(adminLabel);

            JButton manageUsersButton = new JButton("Manage Users");
            manageUsersButton.setBounds(10, 60, 150, 25);
            manageUsersButton.addActionListener(e -> manageUsers());
            userPanel.add(manageUsersButton);

            JButton manageDBButton = new JButton("Manage Database");
            manageDBButton.setBounds(10, 100, 150, 25);
            manageDBButton.addActionListener(e -> manageDatabase());
            userPanel.add(manageDBButton);
        } else if ("guest".equals(userRole)) {
            JLabel guestLabel = new JLabel("Guest Panel");
            guestLabel.setBounds(10, 20, 150, 25);
            userPanel.add(guestLabel);

            JButton bookRoomButton = new JButton("Book Room");
            bookRoomButton.setBounds(10, 60, 150, 25);
            bookRoomButton.addActionListener(e -> bookRoom());
            userPanel.add(bookRoomButton);

            JButton viewBookingsButton = new JButton("View Bookings");
            viewBookingsButton.setBounds(10, 100, 150, 25);
            viewBookingsButton.addActionListener(e -> viewBookings());
            userPanel.add(viewBookingsButton);
        }

        JButton logoutButton = new JButton("Logout");
        logoutButton.setBounds(10, 140, 80, 25);
        logoutButton.addActionListener(e -> {
            userRole = null;
            showLoginPanel();
        });
        userPanel.add(logoutButton);

        frame.add(userPanel);
        frame.revalidate();
        frame.repaint();
    }

    private static void showLoginPanel() {
        frame.getContentPane().removeAll();
        placeComponents(new JPanel());
        frame.revalidate();
        frame.repaint();
    }

    private static void manageUsers() {
        JFrame manageUsersFrame = new JFrame("Manage Users");
        manageUsersFrame.setSize(400, 300);
        manageUsersFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        JPanel panel = new JPanel();
        panel.setLayout(null);

        JButton viewUsersButton = new JButton("View Users");
        viewUsersButton.setBounds(10, 20, 150, 25);
        viewUsersButton.addActionListener(e -> viewUsers());
        panel.add(viewUsersButton);

        JButton deleteUserButton = new JButton("Delete User");
        deleteUserButton.setBounds(10, 60, 150, 25);
        deleteUserButton.addActionListener(e -> deleteUser());
        panel.add(deleteUserButton);

        JButton changeRoleButton = new JButton("Change User Role");
        changeRoleButton.setBounds(10, 100, 150, 25);
        changeRoleButton.addActionListener(e -> changeUserRole());
        panel.add(changeRoleButton);

        manageUsersFrame.add(panel);
        manageUsersFrame.setVisible(true);
    }

    private static void manageDatabase() {
        JFrame manageDatabaseFrame = new JFrame("Database Management");
        manageDatabaseFrame.setSize(400, 300);
        manageDatabaseFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        JPanel panel = new JPanel();
        panel.setLayout(null);

        JButton createDBButton = new JButton("Create Database");
        createDBButton.setBounds(10, 20, 150, 25);
        createDBButton.addActionListener(e -> createDatabase());
        panel.add(createDBButton);

        JButton dropDBButton = new JButton("Drop Database");
        dropDBButton.setBounds(10, 60, 150, 25);
        dropDBButton.addActionListener(e -> dropDatabase());
        panel.add(dropDBButton);

        JButton clearTableButton = new JButton("Clear Table");
        clearTableButton.setBounds(10, 100, 150, 25);
        clearTableButton.addActionListener(e -> clearTable());
        panel.add(clearTableButton);

        JButton addDataButton = new JButton("Add Data");
        addDataButton.setBounds(10, 140, 150, 25);
        addDataButton.addActionListener(e -> addData());
        panel.add(addDataButton);

        JButton searchDataButton = new JButton("Search Data");
        searchDataButton.setBounds(10, 180, 150, 25);
        searchDataButton.addActionListener(e -> searchData());
        panel.add(searchDataButton);

        JButton updateDataButton = new JButton("Update Data");
        updateDataButton.setBounds(200, 100, 150, 25);
        updateDataButton.addActionListener(e -> updateData());
        panel.add(updateDataButton);

        JButton deleteDataButton = new JButton("Delete Data");
        deleteDataButton.setBounds(200, 140, 150, 25);
        deleteDataButton.addActionListener(e -> deleteData());
        panel.add(deleteDataButton);

        manageDatabaseFrame.add(panel);
        manageDatabaseFrame.setVisible(true);
    }

    private static void viewUsers() {
        try {
            StringBuilder usersList = new StringBuilder("Users:\n");
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT username, role FROM users");

            while (resultSet.next()) {
                String username = resultSet.getString("username");
                String role = resultSet.getString("role");
                usersList.append(username).append(" - ").append(role).append("\n");
            }

            JOptionPane.showMessageDialog(null, usersList.toString(), "User List", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException e) {
            showError("Error retrieving users: " + e.getMessage());
        }
    }

    private static void deleteUser() {
        String username = JOptionPane.showInputDialog(null, "Enter username to delete:");
        if (username != null && !username.trim().isEmpty()) {
            try {
                PreparedStatement statement = connection.prepareStatement("DELETE FROM users WHERE username = ?");
                statement.setString(1, username);
                int rowsAffected = statement.executeUpdate();
                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(null, "User deleted successfully!");
                } else {
                    showError("User not found.");
                }
            } catch (SQLException e) {
                showError("Error deleting user: " + e.getMessage());
            }
        } else {
            showError("Username cannot be empty!");
        }
    }

    private static void changeUserRole() {
        String username = JOptionPane.showInputDialog(null, "Enter username to change role:");
        if (username != null && !username.trim().isEmpty()) {
            String[] roles = {"Admin", "Guest"};
            int choice = JOptionPane.showOptionDialog(null,
                    "Select new role:",
                    "Change User Role",
                    JOptionPane.DEFAULT_OPTION,
                    JOptionPane.INFORMATION_MESSAGE,
                    null,
                    roles,
                    roles[0]);

            if (choice >= 0) {
                String newRole = choice == 0 ? "admin" : "guest";
                try {
                    PreparedStatement statement = connection.prepareStatement("UPDATE users SET role = ? WHERE username = ?");
                    statement.setString(1, newRole);
                    statement.setString(2, username);
                    int rowsAffected = statement.executeUpdate();
                    if (rowsAffected > 0) {
                        JOptionPane.showMessageDialog(null, "User role changed successfully!");
                    } else {
                        showError("User not found.");
                    }
                } catch (SQLException e) {
                    showError("Error changing user role: " + e.getMessage());
                }
            }
        } else {
            showError("Username cannot be empty!");
        }
    }

    // Методы для управления базами данных
    private static void createDatabase() {
        String dbName = JOptionPane.showInputDialog("Enter the name of the database to create:");
        if (dbName != null && !dbName.trim().isEmpty()) {
            try (Statement statement = connection.createStatement()) {
                statement.executeUpdate("CREATE DATABASE " + dbName);
                JOptionPane.showMessageDialog(null, "Database " + dbName + " created successfully!");
            } catch (SQLException e) {
                showError("Error creating database: " + e.getMessage());
            }
        }
    }

    private static void dropDatabase() {
        String dbName = JOptionPane.showInputDialog("Enter the name of the database to delete:");
        if (dbName != null && !dbName.trim().isEmpty()) {
            try (Statement statement = connection.createStatement()) {
                statement.executeUpdate("DROP DATABASE IF EXISTS " + dbName);
                JOptionPane.showMessageDialog(null, "Database " + dbName + " deleted successfully!");
            } catch (SQLException e) {
                showError("Error deleting database: " + e.getMessage());
            }
        }
    }

    private static void clearTable() {
        String tableName = JOptionPane.showInputDialog("Enter the name of the table to clear:");
        if (tableName != null && !tableName.trim().isEmpty()) {
            try (Statement statement = connection.createStatement()) {
                statement.executeUpdate("DELETE FROM " + tableName);
                JOptionPane.showMessageDialog(null, "Table " + tableName + " cleared successfully!");
            } catch (SQLException e) {
                showError("Error clearing table: " + e.getMessage());
            }
        }
    }

    private static void addData() {
        String tableName = JOptionPane.showInputDialog("Enter the name of the table to add data:");
        if (tableName == null || tableName.trim().isEmpty()) {
            showError("Table name cannot be empty!");
            return;
        }

        String columns = JOptionPane.showInputDialog("Enter the column names (comma-separated):");
        String values = JOptionPane.showInputDialog("Enter the values (comma-separated):");

        if (columns == null || values == null || columns.trim().isEmpty() || values.trim().isEmpty()) {
            showError("Column names and values cannot be empty!");
            return;
        }

        String sql = String.format("INSERT INTO %s (%s) VALUES (%s)", tableName, columns, values);

        try (Statement statement = connection.createStatement()) {
            statement.executeUpdate(sql);
            JOptionPane.showMessageDialog(null, "Data added successfully!");
        } catch (SQLException e) {
            showError("Error adding data: " + e.getMessage());
        }
    }

    private static void searchData() {
        String tableName = JOptionPane.showInputDialog("Enter the name of the table to search:");
        String columnName = JOptionPane.showInputDialog("Enter the column name to search:");
        String searchValue = JOptionPane.showInputDialog("Enter the value to search:");

        if (tableName != null && !tableName.trim().isEmpty() && columnName != null && searchValue != null) {
            try (PreparedStatement statement = connection.prepareStatement("SELECT * FROM " + tableName + " WHERE " + columnName + " = ?")) {
                statement.setString(1, searchValue);
                ResultSet resultSet = statement.executeQuery();

                StringBuilder results = new StringBuilder("Search Results:\n");
                while (resultSet.next()) {
                    results.append(resultSet.getString(1)).append("\n"); // Assuming retrieval of the first column
                }
                JOptionPane.showMessageDialog(null, results.toString(), "Search Results", JOptionPane.INFORMATION_MESSAGE);
            } catch (SQLException e) {
                showError("Error searching data: " + e.getMessage());
            }
        }
    }

    private static void updateData() {
        String tableName = JOptionPane.showInputDialog("Enter the name of the table to update:");
        String columnName = JOptionPane.showInputDialog("Enter the column name to update:");
        String newValue = JOptionPane.showInputDialog("Enter the new value:");
        String searchColumn = JOptionPane.showInputDialog("Enter the column to search for update:");
        String searchValue = JOptionPane.showInputDialog("Enter the value to search:");

        if (tableName != null && columnName != null && newValue != null && searchColumn != null && searchValue != null) {
            try (PreparedStatement statement = connection.prepareStatement("UPDATE " + tableName + " SET " + columnName + " = ? WHERE " + searchColumn + " = ?")) {
                statement.setString(1, newValue);
                statement.setString(2, searchValue);
                int rowsUpdated = statement.executeUpdate();
                if (rowsUpdated > 0) {
                    JOptionPane.showMessageDialog(null, "Data updated successfully!");
                } else {
                    showError("No matching records found.");
                }
            } catch (SQLException e) {
                showError("Error updating data: " + e.getMessage());
            }
        }
    }

    private static void deleteData() {
        String tableName = JOptionPane.showInputDialog("Enter the name of the table to delete data from:");
        String columnName = JOptionPane.showInputDialog("Enter the column name to search for deletion:");
        String searchValue = JOptionPane.showInputDialog("Enter the value to search for deletion:");

        if (tableName != null && columnName != null && searchValue != null) {
            try (PreparedStatement statement = connection.prepareStatement("DELETE FROM " + tableName + " WHERE " + columnName + " = ?")) {
                statement.setString(1, searchValue);
                int rowsDeleted = statement.executeUpdate();
                if (rowsDeleted > 0) {
                    JOptionPane.showMessageDialog(null, "Data deleted successfully!");
                } else {
                    showError("No matching records found.");
                }
            } catch (SQLException e) {
                showError("Error deleting data: " + e.getMessage());
            }
        }
    }

    private static String selectUserRole() {
        String[] options = {"Admin", "Guest"};
        int choice = JOptionPane.showOptionDialog(null,
                "Select your role:",
                "User Role",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.INFORMATION_MESSAGE,
                null,
                options,
                options[0]);

        return choice == 0 ? "admin" : "guest";
    }

    private static void bookRoom() {
        try {
            String roomNumber = JOptionPane.showInputDialog(null, "Enter room number to book:");
            if (roomNumber != null && !roomNumber.trim().isEmpty()) {
                PreparedStatement statement = connection.prepareStatement("INSERT INTO bookings (username, room_number) VALUES (?, ?)");
                statement.setString(1, "guest");
                statement.setString(2, roomNumber);
                statement.executeUpdate();
                JOptionPane.showMessageDialog(null, "Room booked successfully!");
            } else {
                showError("Room number cannot be empty!");
            }
        } catch (SQLException e) {
            showError("Error booking room: " + e.getMessage());
        }
    }

    private static void viewBookings() {
        StringBuilder bookingsList = new StringBuilder("Bookings:\n");
        try {
            PreparedStatement statement = connection.prepareStatement("SELECT room_number FROM bookings WHERE username = ?");
            statement.setString(1, "guest");
            ResultSet resultSet = statement.executeQuery();

            while (resultSet.next()) {
                String roomNumber = resultSet.getString("room_number");
                bookingsList.append(roomNumber).append("\n");
            }

            JOptionPane.showMessageDialog(null, bookingsList.toString(), "Your Bookings", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException e) {
            showError("Error retrieving bookings: " + e.getMessage());
        }
    }

    private static void showError(String message) {
        JOptionPane.showMessageDialog(null, message, "Error", JOptionPane.ERROR_MESSAGE);
    }
}
